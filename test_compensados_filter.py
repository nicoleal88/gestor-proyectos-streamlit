#!/usr/bin/env python3
"""
Script de prueba para verificar los filtros en la secci√≥n Compensados.
"""

import pandas as pd
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

def test_compensados_filter_logic():
    """Test que verifica la l√≥gica del filtro por Estado en Compensados."""

    print("üß™ Probando l√≥gica del filtro por Estado en Compensados...")

    # Simular datos de compensados para diferentes escenarios
    today = pd.to_datetime(datetime.now().date())

    # Crear datos de prueba
    test_data = {
        'Apellido, Nombres': ['Juan P√©rez', 'Mar√≠a Garc√≠a', 'Pedro L√≥pez', 'Ana Rodr√≠guez', 'Carlos S√°nchez'],
        'Fecha Solicitud': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05'],
        'Tipo': ['Compensatorio', 'Compensatorio', 'Compensatorio', 'Compensatorio', 'Compensatorio'],
        'Desde fecha': [
            today - timedelta(days=5),  # En curso (empez√≥ hace 5 d√≠as)
            today + timedelta(days=10),  # Pr√≥ximo (empieza en 10 d√≠as)
            today - timedelta(days=15),  # Transcurrido (termin√≥ hace 15 d√≠as)
            today - timedelta(days=2),   # En curso (empez√≥ hace 2 d√≠as)
            today + timedelta(days=30)   # Pr√≥ximo (empieza en 30 d√≠as)
        ],
        'Desde hora': ['08:00', '09:00', '', '10:00', ''],
        'Hasta fecha': [
            today + timedelta(days=5),   # En curso (termina en 5 d√≠as)
            today + timedelta(days=20),  # Pr√≥ximo (termina en 20 d√≠as)
            today - timedelta(days=5),   # Transcurrido (termin√≥ hace 5 d√≠as)
            today + timedelta(days=8),   # En curso (termina en 8 d√≠as)
            today + timedelta(days=40)   # Pr√≥ximo (termina en 40 d√≠as)
        ],
        'Hasta hora': ['17:00', '18:00', '', '16:00', '']
    }

    df_compensados = pd.DataFrame(test_data)

    # Convertir fechas a datetime
    df_compensados['Desde fecha'] = pd.to_datetime(df_compensados['Desde fecha'])
    df_compensados['Hasta fecha'] = pd.to_datetime(df_compensados['Hasta fecha'])

    print(f"‚úÖ Datos de prueba creados: {len(df_compensados)} registros")

    # Test 1: Verificar c√°lculo de m√©tricas totales
    en_curso_total = ((df_compensados['Desde fecha'] <= today) & (df_compensados['Hasta fecha'] >= today)).sum()
    proximos_total = (df_compensados['Desde fecha'] > today).sum()
    transcurridos_total = (df_compensados['Hasta fecha'] < today).sum()

    print(f"‚úÖ M√©tricas totales calculadas:")
    print(f"   - En curso: {en_curso_total}")
    print(f"   - Pr√≥ximos: {proximos_total}")
    print(f"   - Transcurridos: {transcurridos_total}")

    assert en_curso_total == 2, f"Deben haber 2 compensatorios en curso, pero hay {en_curso_total}"
    assert proximos_total == 2, f"Deben haber 2 compensatorios pr√≥ximos, pero hay {proximos_total}"
    assert transcurridos_total == 1, f"Debe haber 1 compensatorio transcurrido, pero hay {transcurridos_total}"

    # Test 2: Verificar filtros individuales
    df_en_curso = df_compensados[
        (df_compensados['Desde fecha'] <= today) &
        (df_compensados['Hasta fecha'] >= today)
    ]
    print(f"‚úÖ Compensatorios en curso: {len(df_en_curso)}")
    assert len(df_en_curso) == 2

    df_proximos = df_compensados[df_compensados['Desde fecha'] > today]
    print(f"‚úÖ Pr√≥ximos compensatorios: {len(df_proximos)}")
    assert len(df_proximos) == 2

    df_transcurridos = df_compensados[df_compensados['Hasta fecha'] < today]
    print(f"‚úÖ Compensatorios transcurridos: {len(df_transcurridos)}")
    assert len(df_transcurridos) == 1

    # Test 3: Verificar que los registros est√°n en las categor√≠as correctas
    for idx, row in df_en_curso.iterrows():
        assert row['Desde fecha'] <= today, "Compensatorio en curso debe haber empezado"
        assert row['Hasta fecha'] >= today, "Compensatorio en curso debe estar vigente"

    for idx, row in df_proximos.iterrows():
        assert row['Desde fecha'] > today, "Compensatorio pr√≥ximo debe empezar en el futuro"

    for idx, row in df_transcurridos.iterrows():
        assert row['Hasta fecha'] < today, "Compensatorio transcurrido debe haber terminado"

    print("‚úÖ Todos los tests de l√≥gica pasaron exitosamente!")

    return True

def test_compensados_ui_structure():
    """Test que verifica la estructura de la UI de Compensados."""

    print("\nüîç Verificando estructura de la secci√≥n Compensados...")

    # Verificar que el archivo existe y tiene la estructura correcta
    try:
        with open('/home/nleal/gestor_proyectos_streamlit/ui_sections/compensados.py', 'r') as f:
            content = f.read()

        # Verificar que tiene el filtro implementado
        if 'selected_filter = st.selectbox' in content:
            print("‚úÖ Filtro selectbox implementado")
        else:
            print("‚ùå Filtro selectbox no encontrado")
            return False

        if 'Compensatorios en Curso' in content and 'Pr√≥ximos Compensatorios' in content and 'Compensatorios Transcurridos' in content:
            print("‚úÖ Todas las opciones de filtro implementadas")
        else:
            print("‚ùå Opciones de filtro incompletas")
            return False

        if 'default_filter = \"Compensatorios en Curso\"' in content:
            print("‚úÖ Valor por defecto 'Compensatorios en Curso' implementado")
        else:
            print("‚ùå Valor por defecto no encontrado")
            return False

        if 'st.info(f\"Mostrando: {selected_filter}' in content:
            print("‚úÖ Informaci√≥n de filtro activo implementada")
        else:
            print("‚ùå Informaci√≥n de filtro activo no encontrada")
            return False

        if 'Compensatorios Transcurridos' in content:
            print("‚úÖ Nueva m√©trica 'Compensatorios Transcurridos' a√±adida")
        else:
            print("‚ùå Nueva m√©trica no encontrada")
            return False

        print("‚úÖ Estructura de la secci√≥n Compensados verificada correctamente")

    except FileNotFoundError:
        print("‚ùå Archivo ui_sections/compensados.py no encontrado")
        return False

    return True

def test_filter_functionality():
    """Test que verifica la funcionalidad espec√≠fica del filtro."""

    print("\nüîß Verificando funcionalidad espec√≠fica del filtro...")

    try:
        with open('/home/nleal/gestor_proyectos_streamlit/ui_sections/compensados.py', 'r') as f:
            content = f.read()

        # Verificar l√≥gica de filtrado
        checks = [
            ('if selected_filter == "Compensatorios en Curso":', "L√≥gica para compensatorios en curso"),
            ('elif selected_filter == "Pr√≥ximos Compensatorios":', "L√≥gica para pr√≥ximos compensatorios"),
            ('elif selected_filter == "Compensatorios Transcurridos":', "L√≥gica para compensatorios transcurridos"),
            ('# "Todos" no aplica ning√∫n filtro adicional', "Comentario para opci√≥n 'Todos'")
        ]

        for check, description in checks:
            if check in content:
                print(f"‚úÖ {description} implementado")
            else:
                print(f"‚ùå {description} no encontrado")
                return False

        print("‚úÖ Funcionalidad del filtro verificada correctamente")

    except FileNotFoundError:
        print("‚ùå Archivo ui_sections/compensados.py no encontrado")
        return False

    return True

def main():
    """Funci√≥n principal de test."""
    print("üöÄ Iniciando verificaci√≥n del filtro por Estado en Compensados...\n")

    success = True

    # Test 1: L√≥gica del filtro
    if not test_compensados_filter_logic():
        success = False

    # Test 2: Estructura de la UI
    if not test_compensados_ui_structure():
        success = False

    # Test 3: Funcionalidad espec√≠fica
    if not test_filter_functionality():
        success = False

    print(f"\n{'='*70}")

    if success:
        print("‚úÖ Verificaci√≥n completada exitosamente!")
        print("üìù El filtro por Estado en Compensados est√° correctamente implementado.")
        print("üí° Caracter√≠sticas implementadas:")
        print("   ‚Ä¢ 'Compensatorios en Curso' seleccionado por defecto")
        print("   ‚Ä¢ Filtros para Pr√≥ximos Compensatorios y Compensatorios Transcurridos")
        print("   ‚Ä¢ Opci√≥n 'Todos' para ver todos los registros")
        print("   ‚Ä¢ M√©tricas totales mejoradas con 4 columnas")
        print("   ‚Ä¢ Informaci√≥n del filtro activo mostrada al usuario")
        print("   ‚Ä¢ Integraci√≥n perfecta con la UI existente")
    else:
        print("‚ùå Se encontraron problemas en la verificaci√≥n")
        print("üîß Revisa los errores mostrados arriba")

    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
