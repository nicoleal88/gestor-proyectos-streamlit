#!/usr/bin/env python3
"""
Script de prueba para verificar los filtros en la secci√≥n Vacaciones.
"""

import pandas as pd
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

def test_vacaciones_filter_logic():
    """Test que verifica la l√≥gica del filtro por Estado en Vacaciones."""

    print("üß™ Probando l√≥gica del filtro por Estado en Vacaciones...")

    # Simular datos de vacaciones para diferentes escenarios
    today = pd.to_datetime(datetime.now().date())

    # Crear datos de prueba
    test_data = {
        'Apellido, Nombres': ['Juan P√©rez', 'Mar√≠a Garc√≠a', 'Pedro L√≥pez', 'Ana Rodr√≠guez', 'Carlos S√°nchez'],
        'Fecha solicitud': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05'],
        'Tipo': ['Licencia Ordinaria 2024', 'Licencia Ordinaria 2024', 'Licencia Ordinaria 2024', 'Licencia Ordinaria 2024', 'Licencia Ordinaria 2024'],
        'Fecha inicio': [
            today - timedelta(days=5),  # En curso (empez√≥ hace 5 d√≠as)
            today + timedelta(days=10),  # Pr√≥xima (empieza en 10 d√≠as)
            today - timedelta(days=15),  # Transcurrida (termin√≥ hace 15 d√≠as)
            today - timedelta(days=2),   # En curso (empez√≥ hace 2 d√≠as)
            today + timedelta(days=30)   # Pr√≥xima (empieza en 30 d√≠as)
        ],
        'Fecha regreso': [
            today + timedelta(days=5),   # En curso (termina en 5 d√≠as)
            today + timedelta(days=20),  # Pr√≥xima (termina en 20 d√≠as)
            today - timedelta(days=5),   # Transcurrida (termin√≥ hace 5 d√≠as)
            today + timedelta(days=8),   # En curso (termina en 8 d√≠as)
            today + timedelta(days=40)   # Pr√≥xima (termina en 40 d√≠as)
        ],
        'Observaciones': ['Nota 1', 'Nota 2', 'Nota 3', 'Nota 4', 'Nota 5']
    }

    df_vacaciones = pd.DataFrame(test_data)

    # Convertir fechas a datetime
    df_vacaciones['Fecha inicio'] = pd.to_datetime(df_vacaciones['Fecha inicio'])
    df_vacaciones['Fecha regreso'] = pd.to_datetime(df_vacaciones['Fecha regreso'])
    df_vacaciones['√öltimo d√≠a de vacaciones'] = df_vacaciones['Fecha regreso'] - pd.Timedelta(days=1)

    print(f"‚úÖ Datos de prueba creados: {len(df_vacaciones)} registros")

    # Test 1: Verificar c√°lculo de m√©tricas totales
    en_curso_total = ((df_vacaciones['Fecha inicio'] <= today) & (df_vacaciones['√öltimo d√≠a de vacaciones'] >= today)).sum()
    proximas_total = (df_vacaciones['Fecha inicio'] > today).sum()
    transcurridas_total = (df_vacaciones['√öltimo d√≠a de vacaciones'] < today).sum()

    print(f"‚úÖ M√©tricas totales calculadas:")
    print(f"   - En curso: {en_curso_total}")
    print(f"   - Pr√≥ximas: {proximas_total}")
    print(f"   - Transcurridas: {transcurridas_total}")

    assert en_curso_total == 2, f"Deben haber 2 licencias en curso, pero hay {en_curso_total}"
    assert proximas_total == 2, f"Deben haber 2 licencias pr√≥ximas, pero hay {proximas_total}"
    assert transcurridas_total == 1, f"Debe haber 1 licencia transcurrida, pero hay {transcurridas_total}"

    # Test 2: Verificar filtros individuales
    df_en_curso = df_vacaciones[
        (df_vacaciones['Fecha inicio'] <= today) &
        (df_vacaciones['√öltimo d√≠a de vacaciones'] >= today)
    ]
    print(f"‚úÖ Licencias en curso: {len(df_en_curso)}")
    assert len(df_en_curso) == 2

    df_proximas = df_vacaciones[df_vacaciones['Fecha inicio'] > today]
    print(f"‚úÖ Pr√≥ximas licencias: {len(df_proximas)}")
    assert len(df_proximas) == 2

    df_transcurridas = df_vacaciones[df_vacaciones['√öltimo d√≠a de vacaciones'] < today]
    print(f"‚úÖ Licencias transcurridas: {len(df_transcurridas)}")
    assert len(df_transcurridas) == 1

    # Test 3: Verificar que los registros est√°n en las categor√≠as correctas
    for idx, row in df_en_curso.iterrows():
        assert row['Fecha inicio'] <= today, "Licencia en curso debe haber empezado"
        assert row['√öltimo d√≠a de vacaciones'] >= today, "Licencia en curso debe estar vigente"

    for idx, row in df_proximas.iterrows():
        assert row['Fecha inicio'] > today, "Licencia pr√≥xima debe empezar en el futuro"

    for idx, row in df_transcurridas.iterrows():
        assert row['√öltimo d√≠a de vacaciones'] < today, "Licencia transcurrida debe haber terminado"

    print("‚úÖ Todos los tests de l√≥gica pasaron exitosamente!")

    return True

def test_vacaciones_ui_structure():
    """Test que verifica la estructura de la UI de Vacaciones."""

    print("\nüîç Verificando estructura de la secci√≥n Vacaciones...")

    # Verificar que el archivo existe y tiene la estructura correcta
    try:
        with open('/home/nleal/gestor_proyectos_streamlit/ui_sections/vacaciones.py', 'r') as f:
            content = f.read()

        # Verificar que tiene el filtro implementado
        if 'selected_filter = st.selectbox' in content:
            print("‚úÖ Filtro selectbox implementado")
        else:
            print("‚ùå Filtro selectbox no encontrado")
            return False

        if 'Licencias en Curso' in content and 'Pr√≥ximas Licencias' in content and 'Licencias Transcurridas' in content:
            print("‚úÖ Todas las opciones de filtro implementadas")
        else:
            print("‚ùå Opciones de filtro incompletas")
            return False

        if 'default_filter = "Licencias en Curso"' in content:
            print("‚úÖ Valor por defecto 'Licencias en Curso' implementado")
        else:
            print("‚ùå Valor por defecto no encontrado")
            return False

        if 'st.info(f"Mostrando: {selected_filter}' in content:
            print("‚úÖ Informaci√≥n de filtro activo implementada")
        else:
            print("‚ùå Informaci√≥n de filtro activo no encontrada")
            return False

        print("‚úÖ Estructura de la secci√≥n Vacaciones verificada correctamente")

    except FileNotFoundError:
        print("‚ùå Archivo ui_sections/vacaciones.py no encontrado")
        return False

    return True

def test_filter_functionality():
    """Test que verifica la funcionalidad espec√≠fica del filtro."""

    print("\nüîß Verificando funcionalidad espec√≠fica del filtro...")

    try:
        with open('/home/nleal/gestor_proyectos_streamlit/ui_sections/vacaciones.py', 'r') as f:
            content = f.read()

        # Verificar l√≥gica de filtrado
        checks = [
            ('if selected_filter == "Licencias en Curso":', "L√≥gica para licencias en curso"),
            ('elif selected_filter == "Pr√≥ximas Licencias":', "L√≥gica para pr√≥ximas licencias"),
            ('elif selected_filter == "Licencias Transcurridas":', "L√≥gica para licencias transcurridas"),
            ('# "Todas" no aplica ning√∫n filtro adicional', "Comentario para opci√≥n 'Todas'")
        ]

        for check, description in checks:
            if check in content:
                print(f"‚úÖ {description} implementado")
            else:
                print(f"‚ùå {description} no encontrado")
                return False

        print("‚úÖ Funcionalidad del filtro verificada correctamente")

    except FileNotFoundError:
        print("‚ùå Archivo ui_sections/vacaciones.py no encontrado")
        return False

    return True

def main():
    """Funci√≥n principal de test."""
    print("üöÄ Iniciando verificaci√≥n del filtro por Estado en Vacaciones...\n")

    success = True

    # Test 1: L√≥gica del filtro
    if not test_vacaciones_filter_logic():
        success = False

    # Test 2: Estructura de la UI
    if not test_vacaciones_ui_structure():
        success = False

    # Test 3: Funcionalidad espec√≠fica
    if not test_filter_functionality():
        success = False

    print(f"\n{'='*70}")

    if success:
        print("‚úÖ Verificaci√≥n completada exitosamente!")
        print("üìù El filtro por Estado en Vacaciones est√° correctamente implementado.")
        print("üí° Caracter√≠sticas implementadas:")
        print("   ‚Ä¢ 'Licencias en Curso' seleccionado por defecto")
        print("   ‚Ä¢ Filtros para Pr√≥ximas Licencias y Licencias Transcurridas")
        print("   ‚Ä¢ Opci√≥n 'Todas' para ver todos los registros")
        print("   ‚Ä¢ M√©tricas totales preservadas (no afectadas por el filtro)")
        print("   ‚Ä¢ Informaci√≥n del filtro activo mostrada al usuario")
        print("   ‚Ä¢ Integraci√≥n perfecta con la UI existente")
    else:
        print("‚ùå Se encontraron problemas en la verificaci√≥n")
        print("üîß Revisa los errores mostrados arriba")

    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
